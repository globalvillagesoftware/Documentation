############################################
Install Python 3.8.3 on Ubuntu 20.04 Desktop
############################################

This turns out to be quite a laborious job. This is due to a number of corner cases that are
encountered when installing `Python` on `Linux` and it all has to be done manually from the command
line. Therefore, I felt it was useful to document a successful full installation of `Python` on
`Ubuntu`.

The reasons for difficulty include:

* `Python` for `Linux` must be built and installed from source code.
* `Ubuntu` already has `Python 3.8.2` installed and it is used for many components of `Ubuntu`. It
  is important that the default installation of `Python` on `Ubuntu` should not be disrupted by the
  installation of another version of `Python`.
  
  `Python` includes a number of optional modules. These modules are not compiled unless the source
  prerequisites for these modules are present on `Ubuntu`. If you want a complete version of
  `Python` you will need to install the  dependencies of these modules before compiling `Python`.
  The compile process suggests that you look in the function `detect-modules` in the source file
  `setup.py` for the module names of the necessary prerequisites but the tests contained there are
  testing whether components within the source dependencies are available, and this gives little
  guidance or help on finding the source dependency names themselves. You are on your own here.
 
 There are several optional modules that do not have their prerequisite components installed on
 vanilla `Ubuntu`. Since these are optional modules and you may not need them all on your system,
 the dependencies for each optional module are included so that you can easily pick and choose the
 optional modules that you want.
 These include the following:
 
  * `gdbm`     - **Berkley** `SQL` Database otherwise known as dbm
  
    * `libgdbm-dev`
    * `libocsigenserver-ocaml-dev`
    * `libopenipmi-dev`
    * `freebsd-glue`

  * `lzma`
    * `liblzma-dev`
    * `lzma`

  * `readline`
  
     * `libreadline-gplv2-dev`

  * `curses`
  
    * `libncursesw5-dev`
  
  * `openssl`
  
    * `libssl-dev`
  
  * `sqlite`
  
    * `libsqlite3-dev`
  
  * `tcl/tk`
  
    * `tk-dev`
  
  * `bz2`
  
    * `libbz2-dev`

I supply a
`bash script <https://github.com/globalvillagesoftware/ShellUtilities/blob/master/src/installPython.sh>`
that you can use to automate the installation of `Python`. This script takes a number of optional
arguments that allow you to control it's operation:

installPython.sh [-p] [-o] 

-d specifies that you want a debugging version of the compiler with no compiler optimization. If it
   is not specified you get a production version of the compiler with optimizations. You probably
   want a production compiler unless you are modifying and therefore debugging `Python` itself.
-o specifies a list of optional modules. If it is not specified, no optional modules will be
   included. A special value is `all` that indicates that all optional modules are desired.
   The modules supported are specified as a comma separated list and accept the following names:
   * `gdbm`
   * `sqlite`
   * `lzma`
   * `bz2`
   * `readline`
   * `curses`
   * `openssl`
   * `tcl/tk`

Thus `installPython.sh -d -o lzma,bz2` would create an debugging version of the compiler with the
optional modules `lzma` and `bz2` while `installPython.sh` would create a production version of the
compiler with no optional modules and `installPython.sh -o all`  would create a production version
of the compiler with all optional modules included. Unrecognized options make rhe script fail while
unrecognized optional module names are ignored with a warning. The script returns 1 if a warning was
issued and 2 if an error occurred.
